// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;

namespace mms_sharp
{
    internal static unsafe partial class MmsApi
    {
        const string __DllName = "MmsSharp";

        [DllImport(__DllName, EntryPoint = "maze_width", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int maze_width();

        [DllImport(__DllName, EntryPoint = "maze_height", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int maze_height();

        [DllImport(__DllName, EntryPoint = "wall_front", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool wall_front();

        [DllImport(__DllName, EntryPoint = "wall_right", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool wall_right();

        [DllImport(__DllName, EntryPoint = "wall_left", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool wall_left();

        [DllImport(__DllName, EntryPoint = "move_forward", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void move_forward(uint distance);

        [DllImport(__DllName, EntryPoint = "turn_right", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void turn_right();

        [DllImport(__DllName, EntryPoint = "turn_left", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void turn_left();

        [DllImport(__DllName, EntryPoint = "set_wall", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_wall(uint x, uint y, byte* direction_utf8, int direction_len);

        [DllImport(__DllName, EntryPoint = "clear_wall", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void clear_wall(uint x, uint y, byte* direction_utf8, int direction_len);

        [DllImport(__DllName, EntryPoint = "set_color", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_color(uint x, uint y, byte* color_utf8, int color_len);

        [DllImport(__DllName, EntryPoint = "clear_color", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void clear_color(uint x, uint y);

        [DllImport(__DllName, EntryPoint = "clear_all_color", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void clear_all_color();

        [DllImport(__DllName, EntryPoint = "set_text", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void set_text(uint x, uint y, byte* text_utf8, int text_len);

        [DllImport(__DllName, EntryPoint = "clear_text", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void clear_text(uint x, uint y);

        [DllImport(__DllName, EntryPoint = "clear_all_text", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void clear_all_text();

        [DllImport(__DllName, EntryPoint = "was_reset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool was_reset();

        [DllImport(__DllName, EntryPoint = "ack_reset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void ack_reset();

        [DllImport(__DllName, EntryPoint = "free_byte_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_byte_buffer(ByteBuffer* buffer);

        [DllImport(__DllName, EntryPoint = "get_stat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ByteBuffer* get_stat(byte* query_utf8, int query_len);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ByteBuffer
    {
        public byte* ptr;
        public int length;
        public int capacity;
    }



}
    